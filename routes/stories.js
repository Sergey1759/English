const express = require('express');
const router = express.Router();
const isAuthenticated = require('./middleware/isAuthenticated');
const Word = require('../api/word');
const Gpt = require('../modules/chat-gpt')
const translate = require("../modules/puppeteer/getContextReverso");
const getImages = require("../modules/telegram/getImage");


router.get('/',isAuthenticated, async function(req, res, next) {
    let words = await Word.getByUserId(req.user.id);
    res.render('stories', { title: 'Express', words});
});

router.post('/',isAuthenticated, async function(req, res, next) {
    let words = await Word.getByUserId(req.user.id);
    let myWords = 'apple, pear, banana';
    console.log('start')
    let story = await Gpt(`write story for 100 words using these words "${req.body.words}"`);
    // let story = `Now that you've generated your first chat completion, let's break down the response object. We can see the finish_reason is stop which means the API returned the full chat completion generated by the model without running into any limits. In the choices list, we only generated a single message but you can set the n parameter to generate multiple messages choices.`
    console.log(story);
    res.send({story})
});

router.post('/createWord',isAuthenticated, async function(req, res, next) {
    const word = req.body.word;
    const result = await translate(word);
    const images = await getImages(word);

    const savedWord = new Word(word,result.meanings,result.examples,images,req.user.id);
    await savedWord.createWord();
});



module.exports = router;